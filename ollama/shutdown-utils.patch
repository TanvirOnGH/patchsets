--- a/llm/llama.cpp/examples/server/utils.hpp
+++ b/llm/llama.cpp/examples/server/utils.hpp
@@ -6,6 +6,7 @@
 #include <mutex>
 #include <condition_variable>
 #include <unordered_map>
+#include <atomic>
 
 #include "json.hpp"
 
@@ -190,6 +191,7 @@
 struct llama_server_queue {
     int id = 0;
     std::mutex mutex_tasks;
+    std::atomic<bool> running;
     // queues
     std::vector<task_server> queue_tasks;
     std::vector<task_server> queue_tasks_deferred;
@@ -248,9 +250,15 @@
         queue_tasks_deferred.clear();
     }
 
-    // Start the main loop. This call is blocking
-    [[noreturn]]
+    // end the start_loop routine
+    void terminate() {
+        running = false;
+        condition_tasks.notify_all();
+    }
+
+    // Start the main loop.
     void start_loop() {
+        running = true;
         while (true) {
             // new task arrived
             LOG_VERBOSE("have new task", {});
@@ -294,8 +302,12 @@
             {
                 std::unique_lock<std::mutex> lock(mutex_tasks);
                 if (queue_tasks.empty()) {
+                    if (!running.load()) {
+                        LOG_VERBOSE("ending start_loop", {});
+                        return;
+                    }
                     condition_tasks.wait(lock, [&]{
-                        return !queue_tasks.empty();
+                        return (!queue_tasks.empty() || !running.load());
                     });
                 }
             }
